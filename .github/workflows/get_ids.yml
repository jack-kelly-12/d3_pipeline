name: Get NCAA IDs

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

concurrency:
  group: ncaa-scraper
  cancel-in-progress: false

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 300

    # Explicitly request write permissions
    permissions:
      contents: write

    env:
      DATA_DIR: data

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Using GITHUB_TOKEN for checkout
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests beautifulsoup4 tqdm

      - name: Run scraper
        id: scraper
        timeout-minutes: 290
        continue-on-error: true
        run: |
          python scrapers/get_all_ids.py --data_dir ${{ env.DATA_DIR }}

      - name: Commit and push progress
        if: always()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Stage all relevant files
          git add data/ || true
          git add scraper.log scraper_progress.bak || true

          # Check if there are changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            # Commit changes first
            git commit -m "Updated ids"
            
            # Simple push attempt with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0
            PUSH_SUCCESS=false
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" != "true" ]; do
              echo "Push attempt $((RETRY_COUNT+1))/$MAX_RETRIES"
              
              # Fetch latest changes
              git fetch origin
              
              # Try to pull with merge strategy
              git pull --no-edit origin ${GITHUB_REF#refs/heads/} || {
                echo "Pull failed, attempting simple merge..."
                # If complex merge fails, try a simple merge
                git merge --strategy-option=ours --no-edit origin/${GITHUB_REF#refs/heads/} || {
                  echo "Both pull and merge failed, trying to reset and apply changes"
                  # Stash our current changes
                  git stash
                  # Reset to remote
                  git reset --hard origin/${GITHUB_REF#refs/heads/}
                  # Try to apply stashed changes
                  git stash pop || {
                    echo "Could not apply stashed changes, forcing push"
                    git add data/ scraper.log scraper_progress.bak || true
                    git commit -m "Updated ids (reset)" || true
                  }
                }
              }
              
              # Try to push
              if git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"; then
                PUSH_SUCCESS=true
                echo "Push successful on attempt $((RETRY_COUNT+1))"
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Push failed, retrying in $((5*RETRY_COUNT)) seconds..."
                  sleep $((5*RETRY_COUNT))
                else
                  echo "All regular push attempts failed, trying force push as last resort"
                  git push --force-with-lease "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" && {
                    echo "Force push succeeded"
                    PUSH_SUCCESS=true
                  } || {
                    echo "Even force push failed, giving up"
                  }
                fi
              fi
            done
            
            if [ "$PUSH_SUCCESS" != "true" ]; then
              echo "Failed to push changes after multiple attempts"
              exit 1
            fi
          else
            echo "No changes to commit"
          fi

      # Final cleanup step
      - name: Cleanup
        if: always()
        run: |
          # Add any cleanup tasks here
          echo "Scraper completed with status: ${{ steps.scraper.outcome }}"
